{"ast":null,"code":"var _jsxFileName = \"/home/goyal/cohort-g/Phase2/week13/gitfunc/src/context/GithubState.js\",\n    _s = $RefreshSig$();\n\nimport GithubContext from \"./GithubContext\";\nimport axios from \"axios\";\nimport React, { useReducer } from \"react\";\nimport { ALL_USERS, RESET_USER, SET_LOADING, SET_USER } from \"./types\";\nimport githubReducer from \"./GithubReducer\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst GithubState = props => {\n  _s();\n\n  const initialState = {\n    users: [],\n    loading: true,\n    user: {},\n    repos: []\n  };\n  const [state, dispatch] = useReducer(githubReducer, initialState);\n\n  const getAllUsers = () => {\n    axios.get(\"https://api.github.com/users\").then(res => {\n      dispatch({\n        type: ALL_USERS,\n        payload: res.data\n      });\n    });\n  };\n\n  const searchUsers = async query => {\n    dispatch({\n      type: SET_LOADING\n    });\n    let res = await axios.get(`https://api.github.com/search/users?q=${query}`);\n    dispatch({\n      type: ALL_USERS,\n      payload: res.data.items\n    });\n  };\n\n  const getUserInfo = async username => {\n    dispatch({\n      type: SET_LOADING\n    });\n    let user = await axios.get(`https://api.github.com/users/${username}`);\n    let repos = await axios.get(`https://api.github.com/users/${username}/repos`);\n    dispatch({\n      type: SET_USER,\n      payload: {\n        user: user.data,\n        repos: repos.data\n      }\n    });\n  };\n\n  const resetUserInfo = () => {\n    dispatch({\n      type: RESET_USER\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(GithubContext.Provider, {\n    value: { ...state,\n      getAllUsers,\n      searchUsers,\n      getUserInfo\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 5\n  }, this);\n};\n\n_s(GithubState, \"6JWkGZ32UPfojeNx+xqn8ZU8A0Q=\");\n\n_c = GithubState;\nexport default GithubState;\n\nvar _c;\n\n$RefreshReg$(_c, \"GithubState\");","map":{"version":3,"sources":["/home/goyal/cohort-g/Phase2/week13/gitfunc/src/context/GithubState.js"],"names":["GithubContext","axios","React","useReducer","ALL_USERS","RESET_USER","SET_LOADING","SET_USER","githubReducer","GithubState","props","initialState","users","loading","user","repos","state","dispatch","getAllUsers","get","then","res","type","payload","data","searchUsers","query","items","getUserInfo","username","resetUserInfo","children"],"mappings":";;;AAAA,OAAOA,aAAP,MAA0B,iBAA1B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,IAAgBC,UAAhB,QAAkC,OAAlC;AACA,SAASC,SAAT,EAAoBC,UAApB,EAAgCC,WAAhC,EAA6CC,QAA7C,QAA6D,SAA7D;AACA,OAAOC,aAAP,MAA0B,iBAA1B;;;AACA,MAAMC,WAAW,GAAIC,KAAD,IAAW;AAAA;;AAC7B,QAAMC,YAAY,GAAG;AACnBC,IAAAA,KAAK,EAAE,EADY;AAEnBC,IAAAA,OAAO,EAAE,IAFU;AAGnBC,IAAAA,IAAI,EAAE,EAHa;AAInBC,IAAAA,KAAK,EAAE;AAJY,GAArB;AAMA,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBd,UAAU,CAACK,aAAD,EAAgBG,YAAhB,CAApC;;AACA,QAAMO,WAAW,GAAG,MAAM;AACxBjB,IAAAA,KAAK,CAACkB,GAAN,CAAU,8BAAV,EAA0CC,IAA1C,CAAgDC,GAAD,IAAS;AACtDJ,MAAAA,QAAQ,CAAC;AAAEK,QAAAA,IAAI,EAAElB,SAAR;AAAmBmB,QAAAA,OAAO,EAAEF,GAAG,CAACG;AAAhC,OAAD,CAAR;AACD,KAFD;AAGD,GAJD;;AAKA,QAAMC,WAAW,GAAG,MAAOC,KAAP,IAAiB;AACnCT,IAAAA,QAAQ,CAAC;AAAEK,MAAAA,IAAI,EAAEhB;AAAR,KAAD,CAAR;AACA,QAAIe,GAAG,GAAG,MAAMpB,KAAK,CAACkB,GAAN,CAAW,yCAAwCO,KAAM,EAAzD,CAAhB;AACAT,IAAAA,QAAQ,CAAC;AAAEK,MAAAA,IAAI,EAAElB,SAAR;AAAmBmB,MAAAA,OAAO,EAAEF,GAAG,CAACG,IAAJ,CAASG;AAArC,KAAD,CAAR;AACD,GAJD;;AAKA,QAAMC,WAAW,GAAG,MAAOC,QAAP,IAAoB;AACtCZ,IAAAA,QAAQ,CAAC;AAAEK,MAAAA,IAAI,EAAEhB;AAAR,KAAD,CAAR;AACA,QAAIQ,IAAI,GAAG,MAAMb,KAAK,CAACkB,GAAN,CAAW,gCAA+BU,QAAS,EAAnD,CAAjB;AACA,QAAId,KAAK,GAAG,MAAMd,KAAK,CAACkB,GAAN,CACf,gCAA+BU,QAAS,QADzB,CAAlB;AAGAZ,IAAAA,QAAQ,CAAC;AACPK,MAAAA,IAAI,EAAEf,QADC;AAEPgB,MAAAA,OAAO,EAAE;AAAET,QAAAA,IAAI,EAAEA,IAAI,CAACU,IAAb;AAAmBT,QAAAA,KAAK,EAAEA,KAAK,CAACS;AAAhC;AAFF,KAAD,CAAR;AAID,GAVD;;AAWA,QAAMM,aAAa,GAAG,MAAM;AAC1Bb,IAAAA,QAAQ,CAAC;AAAEK,MAAAA,IAAI,EAAEjB;AAAR,KAAD,CAAR;AACD,GAFD;;AAGA,sBACE,QAAC,aAAD,CAAe,QAAf;AACE,IAAA,KAAK,EAAE,EAAE,GAAGW,KAAL;AAAYE,MAAAA,WAAZ;AAAyBO,MAAAA,WAAzB;AAAsCG,MAAAA;AAAtC,KADT;AAAA,cAGGlB,KAAK,CAACqB;AAHT;AAAA;AAAA;AAAA;AAAA,UADF;AAOD,CAvCD;;GAAMtB,W;;KAAAA,W;AAyCN,eAAeA,WAAf","sourcesContent":["import GithubContext from \"./GithubContext\";\nimport axios from \"axios\";\nimport React, { useReducer } from \"react\";\nimport { ALL_USERS, RESET_USER, SET_LOADING, SET_USER } from \"./types\";\nimport githubReducer from \"./GithubReducer\";\nconst GithubState = (props) => {\n  const initialState = {\n    users: [],\n    loading: true,\n    user: {},\n    repos: [],\n  };\n  const [state, dispatch] = useReducer(githubReducer, initialState);\n  const getAllUsers = () => {\n    axios.get(\"https://api.github.com/users\").then((res) => {\n      dispatch({ type: ALL_USERS, payload: res.data });\n    });\n  };\n  const searchUsers = async (query) => {\n    dispatch({ type: SET_LOADING });\n    let res = await axios.get(`https://api.github.com/search/users?q=${query}`);\n    dispatch({ type: ALL_USERS, payload: res.data.items });\n  };\n  const getUserInfo = async (username) => {\n    dispatch({ type: SET_LOADING });\n    let user = await axios.get(`https://api.github.com/users/${username}`);\n    let repos = await axios.get(\n      `https://api.github.com/users/${username}/repos`\n    );\n    dispatch({\n      type: SET_USER,\n      payload: { user: user.data, repos: repos.data },\n    });\n  };\n  const resetUserInfo = () => {\n    dispatch({ type: RESET_USER });\n  };\n  return (\n    <GithubContext.Provider\n      value={{ ...state, getAllUsers, searchUsers, getUserInfo }}\n    >\n      {props.children}\n    </GithubContext.Provider>\n  );\n};\n\nexport default GithubState;\n"]},"metadata":{},"sourceType":"module"}